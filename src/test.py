from scipy.special import factorial2 as fact2
import numpy as np
a=[([0.0, -0.143225816552, 0.0], [0, 0, 0], [130.7093214, 23.80886605, 6.443608313], [0.1543289672962566, 0.5353281422870151, 0.44463454218921483], 3, [27.551167822078394, 7.681819989204459, 2.882417873168662])
 ,([0.0, -0.143225816552, 0.0], [0, 0, 0], [5.033151319, 1.169596125, 0.38038896], [-0.09996722918837482, 0.399512826093505, 0.7001154688886181], 3, [2.394914882501622, 0.8015618386293725, 0.34520813393821864])
 ,([0.0, -0.143225816552, 0.0], [1, 0, 0], [5.033151319, 1.169596125, 0.38038896], [0.15591627500155536, 0.6076837186060621, 0.39195739310391], 3, [10.745832634231425, 1.7337440707285057, 0.42581893344677013])
 ,([0.0, -0.143225816552, 0.0], [0, 1, 0], [5.033151319, 1.169596125, 0.38038896], [0.15591627500155536, 0.6076837186060621, 0.39195739310391], 3, [10.745832634231425, 1.7337440707285057, 0.42581893344677013])
 ,([0.0, -0.143225816552, 0.0], [0, 0, 1], [5.033151319, 1.169596125, 0.38038896], [0.15591627500155536, 0.6076837186060621, 0.39195739310391], 3, [10.745832634231425, 1.7337440707285057, 0.42581893344677013])
 ,([1.638036840407, 1.136548822547, -0.0], [0, 0, 0], [3.425250914, 0.6239137298, 0.168855404], [0.15432896729459913, 0.5353281422812658, 0.44463454218443965], 3, [1.7944418337900938, 0.5003264922111158, 0.18773546184636128])
,([-1.638036840407, 1.136548822547, -0.0], [0, 0, 0], [3.425250914, 0.6239137298, 0.168855404], [0.15432896729459913, 0.5353281422812658, 0.44463454218443965], 3, [1.7944418337900938, 0.5003264922111158, 0.18773546184636128])]
def __init__(self,origin=[0.0,0.0,0.0],shell=(0,0,0),exps=[],coefs=[]):
        self.origin = np.asarray(origin)
        self.shell = shell
        self.exps  = exps
        self.coefs = coefs
        self.norm = None
        self.normalize()
print(np.shape(a))
def normalize(self):
    ''' Routine to normalize the basis functions, in case they
        do not integrate to unity.
        '''
    a=[]
    for i in range(np.shape(self)[0]):
        shell=self[i][1]
        exps=self[i][2]
        print(exps)
                
        l,m,n = shell
        L = l+m+n
        # self.norm is a list of length equal to number primitives
        # normalize primitives first (PGBFs)
        norm = np.sqrt(np.power(2,2*(l+m+n)+1.5)*
                                np.power(exps,l+m+n+1.5)/
                                fact2(2*l-1)/fact2(2*m-1)/
                                fact2(2*n-1)/np.power(np.pi,1.5))
        a.append(norm)
    return a

b=normalize(a)
print(b)